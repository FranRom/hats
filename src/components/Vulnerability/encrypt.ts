//const openpgp = require("openpgp");
import { readKey, generateSessionKey, encrypt, createMessage, MaybeArray, Key } from 'openpgp';
const IpfsHash = require('ipfs-only-hash');

export async function encryptWithKeys(publicKeyOrKeys: string | string[], dataToEncrypt: string) {
    let keyOrKeys: MaybeArray<Key>;
    if (Array.isArray(publicKeyOrKeys)) {
        keyOrKeys = await Promise.all(publicKeyOrKeys.map(key => readKey({ armoredKey: key })));
    } else {
        keyOrKeys = await readKey({ armoredKey: publicKeyOrKeys })
    }
    const sessionKey = await generateSessionKey({ encryptionKeys: keyOrKeys });
    const encryptedData = await encrypt({
        message: await createMessage({ text: dataToEncrypt }),
        sessionKey
    });
    return { encryptedData, sessionKey };
}

export async function calcCid(content) {
    return await IpfsHash.of(content.replace(/\s+/g, ''));
}