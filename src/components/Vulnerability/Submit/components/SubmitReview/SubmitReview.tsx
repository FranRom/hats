import { useContext, useEffect } from "react";
import { useTranslation } from "react-i18next";
import { AccordionContext } from "../../../VulnerabilityAccordion";
import Loading from "../../../../Shared/Loading";
import { onChainTransactionSuccess } from "../../Submit";
import EditIcon from "../../../../../assets/icons/edit.svg";
import { Card, IVulnerabilityData } from "../../../types";
import "./index.scss";
import { useEthers } from "@usedapp/core";
import { useClaim } from "hooks/contractHooks";
import { usePrevious } from "hooks/usePrevious";
import { useVaults } from "hooks/useVaults";
import { useSupportedNetwork } from "hooks/useSupportedNetwork";
import { calcCid } from "components/Vulnerability/encrypt";

interface IProps {
  cards: IVulnerabilityData
  setBotStatus: Function
}

export default function SubmitReview({ cards, setBotStatus }: IProps) {
  const isSupportedNetwork = useSupportedNetwork();
  const { chainId } = useEthers();
  const { t } = useTranslation();
  const { submitCard, toggleCard } = useContext(AccordionContext);
  const isVerified = cards.project.verified && cards.contact.verified && cards.description.verified && cards.terms.verified;
  const { vaults } = useVaults();
  const vault = vaults?.find(vault => vault.id === cards.project.projectId)!;
  const description = vault && vault.description;
  const committeeCheckedIn = vault && vault.committeeCheckedIn;
  const { account } = useEthers()
  const { send: submit, state: submitState } = useClaim(vault?.master.address)
  const { encryptedData } = cards.description;

  const submittingVulnerability = submitState.status === 'Mining'
  const showSubmitWarning = !isVerified || !account;
  const prevSubmitState = usePrevious(submitState);

  const handleSubmit = async () => {
    submit(await calcCid(encryptedData));
  }

  useEffect(() => {
    if (submitState.status !== prevSubmitState?.status && submitState.status === 'Success' && chainId) {
      const route = vault!.description?.["project-metadata"]?.name;
      const telegramBotUrl = `${description?.["communication-channel"]?.["committee-bot"]}`;
      onChainTransactionSuccess(submitCard, telegramBotUrl, encryptedData, submitState.receipt?.transactionHash!, route, setBotStatus, chainId, cards.project.contractAddress);
    }
  }, [encryptedData, submitState, setBotStatus, vault, description, submitCard, chainId, prevSubmitState?.status, cards.project.contractAddress])


  return (
    <div className="submit-review-wrapper">
      {t("SubmitVulnerability.Submit.review-notice")}

      <div className="review-details-container">
        <div className="project-and-contact-container">
          <div className="review-item project-name-item">
            <div className="item-title-container">
              <span>Project Name:</span>
              <img src={EditIcon} alt="edit" onClick={() => toggleCard(Card.project)} />
            </div>
            <span className="item-value">{cards.project.projectName}</span>
          </div>
          <div className="review-item">
            <div className="item-title-container">
              <span>Contact Information:</span>
              <img src={EditIcon} alt="edit" onClick={() => toggleCard(Card.contact)} />
            </div>
            <span className="item-value">{cards.contact.username}</span>
          </div>
        </div>

        <div className="description-container">
          <div className="review-item">
            <div className="item-title-container">
              <span>Vulnerability Description:</span>
              <img src={EditIcon} alt="edit" onClick={() => toggleCard(Card.description)} />
            </div>
            <span className="item-value">{cards.description.description}</span>
          </div>
        </div>
      </div>

      <button disabled={!isVerified || submittingVulnerability || !account || (vault && !committeeCheckedIn) || !isSupportedNetwork} onClick={handleSubmit}>SUBMIT</button>
      {vault && !committeeCheckedIn && <span className="error-label">COMMITTEE IS NOT CHECKED IN YET!</span>}
      {showSubmitWarning && <span className="error-label">{`Please make sure you completed all steps and your wallet is connected.`}</span>}
      {(submittingVulnerability) && <Loading fixed extraText="Submitting might take longer than usual" domElement={document.getElementById("accrodionWrapper") as HTMLElement} zIndex={0} />}
    </div>
  )
}