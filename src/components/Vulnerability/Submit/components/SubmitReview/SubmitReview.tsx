
import { useContext, useState } from "react";
import { useTranslation } from "react-i18next";
import { useDispatch, useSelector } from "react-redux";
import { toggleNotification, toggleSubmittingVulnerability } from "../../../../../actions";
import { createTransaction, submitVulnerability } from "../../../../../actions/contractsActions";
import { DEFAULT_ERROR_MESSAGE, NotificationType } from "../../../../../constants/constants";
import { IVault } from "../../../../../types/types";
import { RootState } from "../../../../../reducers";
import { isProviderAndNetwork, parseJSONToObject } from "../../../../../utils";
import { AccordionContext, ICardData } from "../../../VulnerabilityAccordion";
import { NETWORK } from "../../../../../settings";
import Loading from "../../../../Shared/Loading";
import { onChainTransactionSuccess } from "../../Submit";
import sha256 from "sha256";
import "./index.scss";

const openpgp = require("openpgp");

interface IProps {
  cards: { [id: number]: ICardData }
  setBotStatus: Function
}

export default function SubmitReview({ cards, setBotStatus }: IProps) {
  const dispatch = useDispatch();
  const { t } = useTranslation();
  const [pendingWalletAction, setPendingWalletAction] = useState(false);
  const { submitCard } = useContext(AccordionContext);
  const isVerified = cards[1].verified && cards[2].verified && cards[3].verified && cards[4].verified;
  const vault: IVault = useSelector((state: RootState) => state.dataReducer.vaults.filter((vault: IVault) => vault.id === cards[1].data.projectId)[0]);
  const description = vault && parseJSONToObject((vault.isGuest ? vault.parentDescription : vault.description) as string);
  const committeeCheckedIn = vault && vault.parentVault.committeeCheckedIn;
  const submittingVulnerability = useSelector((state: RootState) => state.layoutReducer.submittingVulnerability);
  const provider = useSelector((state: RootState) => state.web3Reducer.provider);
  const showSubmitWarning = !isVerified || !isProviderAndNetwork(provider);

  const submit = async () => {
    dispatch(toggleSubmittingVulnerability(true));
    setPendingWalletAction(true);
    const encryptedData = await pgpData();
    const telegramBotUrl = `${description?.["communication-channel"]?.["committee-bot"]}`;
    const sha256Encrypted = sha256(encryptedData.replace(/\s+/g, ''));
    try {
      await createTransaction(
        async () => await submitVulnerability(vault.parentVault.master.address, sha256Encrypted),
        () => { setPendingWalletAction(false); },
        async () => {
          onChainTransactionSuccess(submitCard, telegramBotUrl, encryptedData, setBotStatus, dispatch);
        },
        () => { setPendingWalletAction(false); },
        dispatch,
        t("SubmitVulnerability.Submit.on-chain-transaction-success"), 2);
    } catch (err: any) {
      console.error(err);
      dispatch(toggleNotification(true, NotificationType.Error, err?.message ?? DEFAULT_ERROR_MESSAGE, true));
    }
    dispatch(toggleSubmittingVulnerability(false));
  }

  const pgpData = async () => {
    const dataToEncrypt = `
    Project Name: ${cards[1].data.projectName}
    Title: ${cards[3].data.title}
    Description: ${cards[3].data.description}
    Telegram username: ${cards[2].data.username}
    Beneficiary: ${cards[2].data.beneficiary}
    `
    const publicKeyArmored = `${description?.["communication-channel"]?.["pgp-pk"]}`;

    const publicKey = await openpgp.readKey({ armoredKey: publicKeyArmored });

    const encrypted = await openpgp.encrypt({
      message: await openpgp.createMessage({ text: dataToEncrypt }),
      encryptionKeys: publicKey
    });
    return encrypted;
  }

  return (
    <div className="submit-review-wrapper">
      {t("SubmitVulnerability.Submit.review-notice")}

      <button disabled={!isVerified || submittingVulnerability || !isProviderAndNetwork(provider) || (vault && !committeeCheckedIn)} onClick={submit}>SUBMIT</button>
      {vault && !committeeCheckedIn && <span className="error-label">COMMITTEE IS NOT CHECKED IN YET!</span>}
      {showSubmitWarning && <span className="error-label">{`Please make sure you completed all steps and your wallet is connected to ${NETWORK}`}</span>}
      {(pendingWalletAction || submittingVulnerability) && <Loading fixed extraText="Submitting might take longer than usual" domElement={document.getElementById("accrodionWrapper") as HTMLElement} zIndex={0} />}
    </div>
  )
}
