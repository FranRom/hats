import { useContext, useEffect } from "react";
import { useTranslation } from "react-i18next";
import { AccordionContext } from "../../../VulnerabilityAccordion";
import Loading from "../../../../Shared/Loading";
import EditIcon from "../../../../../assets/icons/edit.svg";
import { IVulnerabilityData } from "../../../types";
import "./index.scss";
import { useEthers } from "@usedapp/core";
import { useVaults } from "hooks/useVaults";
import { useClaim } from "hooks/contractHooks";
import { usePrevious } from "hooks/usePrevious";
import { useSupportedNetwork } from "hooks/useSupportedNetwork";
import { sendTransactionToBot } from "../../Submit";
import { BotStatus } from "../SubmitSuccess/SubmitSuccess";

interface IProps {
  cards: IVulnerabilityData | undefined
  setCards: Function
  setBotStatus: Function
}

export default function SubmitReview({ cards, setCards, setBotStatus }: IProps) {
  const { t } = useTranslation();
  const { account, chainId } = useEthers();
  const { submittingVulnerability, submitVulnerability, setCurrentStep } = useContext(AccordionContext);
  const { vaults } = useVaults();
  const vault = vaults?.find(vault => vault.id === cards?.project?.projectId)!;
  const { state: submitState } = useClaim(vault?.master.address);
  const prevSubmitState = usePrevious(submitState);
  const telegramBotUrl = vault?.description?.["communication-channel"]?.["committee-bot"]!;
  const encryptedData = cards?.description?.encryptedData!;
  const route = vault?.description?.["project-metadata"]?.name!;

  useEffect(() => {
    if (submitState.status !== prevSubmitState?.status && submitState.status === 'Success' && chainId) {
      setCards(prev => {
        if (prev && submitState.receipt?.transactionHash) {
          prev.submission = {
            verified: false,
            botStatus: BotStatus.Fail,
            transactionHash: submitState.receipt?.transactionHash!,
            chainId: submitState.chainId!,
          };
          return { ...prev, submission: prev.submission };
        }
      })
      sendTransactionToBot(setCards, telegramBotUrl!, encryptedData, submitState?.receipt?.transactionHash!, route, setBotStatus, cards?.project?.contractAddress!, submitState?.chainId!)
    }
  }, [chainId, submitState.status, prevSubmitState?.status, submitState.receipt?.transactionHash, submitState.chainId, setCards, telegramBotUrl, encryptedData, route, setBotStatus, cards?.project?.contractAddress])

  const isSupportedNetwork = useSupportedNetwork();
  const isVerified = cards?.project?.verified && cards?.contact?.verified && cards?.description?.verified && cards?.terms?.verified;
  const committeeCheckedIn = vault && vault.committeeCheckedIn;
  const showSubmitWarning = !isVerified || !account;

  const handleSubmit = async () => {
    submitVulnerability();
  }

  return (
    <div className="submit-review-wrapper">
      {t("SubmitVulnerability.Submit.review-notice")}

      <div className="review-details-container">
        <div className="project-and-contact-container">
          <div className="review-item project-name-item">
            <div className="item-title-container">
              <span>Project Name:</span>
              <img src={EditIcon} alt="edit" onClick={() => setCurrentStep(1)} />
            </div>
            <span className="item-value">{cards?.project?.projectName}</span>
          </div>
          <div className="review-item">
            <div className="item-title-container">
              <span>Contact Information:</span>
              <img src={EditIcon} alt="edit" onClick={() => setCurrentStep(2)} />
            </div>
            <span className="item-value">{cards?.contact?.username}</span>
          </div>
        </div>

        <div className="description-container">
          <div className="review-item">
            <div className="item-title-container">
              <span>Vulnerability Description:</span>
              <img src={EditIcon} alt="edit" onClick={() => setCurrentStep(3)} />
            </div>
            <span className="item-value">{cards?.description?.description}</span>
          </div>
        </div>
      </div>

      <button disabled={!isVerified || submittingVulnerability || !account || (vault && !committeeCheckedIn) || !isSupportedNetwork} onClick={handleSubmit}>SUBMIT</button>
      {vault && !committeeCheckedIn && <span className="error-label">COMMITTEE IS NOT CHECKED IN YET!</span>}
      {showSubmitWarning && <span className="error-label">{`Please make sure you completed all steps and your wallet is connected.`}</span>}
      {(submittingVulnerability) && <Loading fixed extraText="Submitting might take longer than usual" domElement={document.getElementById("accrodionWrapper") as HTMLElement} zIndex={0} />}
    </div>
  )
}
