import { ICardData } from "../VulnerabilityAccordion";
import SubmitSuccess, { BotStatus } from "./components/SubmitSuccess/SubmitSuccess";
import SubmitReview from "./components/SubmitReview/SubmitReview";
import { useState } from "react";
import { Dispatch } from "redux";
import axios from "axios";
import { toggleNotification } from "../../../actions";
import { NotificationType } from "../../../constants/constants";
import "./index.scss";

interface IProps {
  cards: { [id: number]: ICardData }
  setCards: Function
}

export const onChainTransactionSuccess = async (submitCard: Function, telegramBotUrl: string, encryptedData: string, setBotStatus: Function, dispatch: Dispatch) => {
  try {
    setBotStatus(BotStatus.Pending);
    await axios.post(telegramBotUrl, { msg: encryptedData });
    setBotStatus(BotStatus.Success);
    submitCard(5, { botStatus: BotStatus.Success });
    dispatch(toggleNotification(true, NotificationType.Success, "Bot success!"));
  } catch (error: any) {
    setBotStatus(BotStatus.Fail);
    submitCard(5, {
      botStatus: BotStatus.Fail,
      telegramBotUrl: telegramBotUrl,
      encryptedData: encryptedData
    });
    dispatch(toggleNotification(true, NotificationType.Error, error?.message ?? "Bot failed!"));
    console.error(error);
  }
}

export default function Submit({ cards, setCards }: IProps) {
  const [botStatus, setBotStatus] = useState<BotStatus | undefined>(cards[5].data.botStatus);
  
  return (
    <div className="submit-wrapper card-content">
      {cards[5].verified ? (
        <SubmitSuccess
          setCards={setCards}
          cards={cards}
          botStatus={botStatus}
          setBotStatus={setBotStatus} />) : (
        <SubmitReview
          cards={cards}
          setBotStatus={setBotStatus} />)}
    </div>
  )
}
