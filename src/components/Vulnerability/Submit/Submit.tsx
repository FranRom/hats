import SubmitSuccess, { BotStatus } from "./components/SubmitSuccess/SubmitSuccess";
import SubmitReview from "./components/SubmitReview/SubmitReview";
import { useContext, useState } from "react";
import axios from "axios";
import { Card, IVulnerabilityData } from "../types";
import "./index.scss";
import { DEFAULT_BOT } from "settings";
import { AccordionContext } from "../VulnerabilityAccordion";

/**
 * Function to call the Telegram bot after a success on the blockchain transaction.
 * @param {Function} submitCard 
 * @param {string} telegramBotUrl 
 * @param {string} encryptedData 
 * @param {string} transactionHash 
 * @param {boolean} isRouted 
 * @param {Function} setBotStatus 
 * @param {string} contractAddress
 */
export const onChainTransactionSuccess = async (submitCard: Function, telegramBotUrl: string, encryptedData: string, transactionHash: string, route: string | undefined, setBotStatus: Function, chainId: number, contractAddress: string) => {
  try {
    setBotStatus(BotStatus.Pending);
    const payload = {
      msg: encryptedData,
      txHash: transactionHash,
      chainId,
      route,
      contractAddress,
    };
    try {
      await axios.post(telegramBotUrl, payload);
    } catch (error) {
      await axios.post(DEFAULT_BOT, payload);
    }
    setBotStatus(BotStatus.Success);
    submitCard(Card.submission, Card.submission, { botStatus: BotStatus.Success });
  } catch (error: any) {
    setBotStatus(BotStatus.Fail);
    submitCard(Card.submission, Card.submission, {
      botStatus: BotStatus.Fail,
      telegramBotUrl: telegramBotUrl,
      encryptedData: encryptedData,
      transactionHash: transactionHash,
      contractAddress: contractAddress,
    });
    console.error(error);
  }
}

export default function Submit() {
  const { cards, setCards } = useContext(AccordionContext);
  const [botStatus, setBotStatus] = useState<BotStatus | undefined>(cards.submission?.botStatus);

  return (
    <div className="submit-wrapper card-content">
      {cards?.submission?.verified ? (
        <SubmitSuccess />) : (
        <SubmitReview />)}
    </div>
  )
}
