import SubmitSuccess, { BotStatus } from "./components/SubmitSuccess/SubmitSuccess";
import SubmitReview from "./components/SubmitReview/SubmitReview";
import { useContext, useState, useEffect } from "react";
import axios from "axios";
import "./index.scss";
import { DEFAULT_BOT } from "settings";
import { AccordionContext } from "../VulnerabilityAccordion";

/**
 * Function to call the Telegram bot after a success on the blockchain transaction.
 * @param {Function} setCards 
 * @param {string} telegramBotUrl 
 * @param {string} encryptedData 
 * @param {string} txHash 
 * @param {string} route 
 * @param {Function} setBotStatus 
 * @param {string} contractAddress
 * @param {string} projectName
 * @param {number} chainId
 */

export const sendTransactionToBot = async (setCards: Function, telegramBotUrl: string, encryptedData: string, txHash: string, route: string, setBotStatus: Function, contractAddress: string, chainId: number) => {
  try {
    setBotStatus(BotStatus.Pending)
    const payload = {
      msg: encryptedData,
      txHash,
      chainId,
      route,
      contractAddress,
    };
    console.log("payload", payload);

    try {
      await axios.post(telegramBotUrl, payload)
    } catch (error) {
      await axios.post(DEFAULT_BOT, payload)
    }

    setBotStatus(BotStatus.Success)

    setCards(prev => {
      return { ...prev!, submission: { ...prev!.submission!, botStatus: BotStatus.Success } };
    })

  } catch (error) {
    setBotStatus(BotStatus.Fail)
    console.error(error)
    setCards(prev => {
      return { ...prev!, submission: { ...prev!.submission!, botStatus: BotStatus.Fail } };
    });
  }
}


export default function Submit() {
  const { cards, setCards } = useContext(AccordionContext);
  const [botStatus, setBotStatus] = useState<BotStatus | undefined>();
  useEffect(() => {
    setBotStatus(cards?.submission?.botStatus)
  }, [cards?.submission])

  // console.log("CARDS IN SUBMIT: ", cards, "botStatus: ", botStatus)

  return (
    <div className="submit-wrapper card-content">
      {cards?.submission?.verified ? (
        <SubmitSuccess />) : (
        <SubmitReview cards={cards} setCards={setCards} setBotStatus={setBotStatus} />)}
    </div>
  )
}
