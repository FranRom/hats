import React, { createContext, Dispatch, SetStateAction, useEffect, useState } from "react";
import "../../styles/Vulnerability/VulnerabilityAccordion.scss";
import AccordionCard from "./AccordionCard";
import ProjectSelect from "./ProjectSelect/ProjectSelect";
import Description from "./Description";
import ContactInfo from "./ContactInfo";
import TermsAndProcess from "./TermsAndProcess/TermsAndProcess";
import Submit from "./Submit/Submit";
import { getAppVersion } from "../../utils";
import { LocalStorage } from "../../constants/constants";
import { Card, IVulnerabilityData } from "./types";
import { useTransactions } from "@usedapp/core";
import { useVaults } from "hooks/useVaults";
const packageJSON = require("../../../package.json");

interface IAccordionContext {
  currentCard: Card | undefined
  submittingVurnability: boolean
  cards: IVulnerabilityData | undefined
  setCards: Dispatch<SetStateAction<IVulnerabilityData | undefined>>
  nextCard: Function
  toggleCard: Function
  resetCards: Function
}
export const AccordionContext = createContext<IAccordionContext>(undefined as any);

export const VULNERABILITY_INIT_DATA: IVulnerabilityData = {
  version: packageJSON.version
};

export default function VulnerabilityAccordion() {
  const submittingVurnability = useTransactions().transactions.some(tx => !tx.receipt)
  const [currentCard, setCurrentCard] = useState<Card | undefined>();
  const [cards, setCards] = useState<IVulnerabilityData>();
  const { vaults } = useVaults();
  const vault = vaults?.find(vault => vault.id === cards?.project?.projectId);

  useEffect(() => {
    let cachedData: IVulnerabilityData = JSON.parse(localStorage.getItem(LocalStorage.SubmitVulnerability) || JSON.stringify(VULNERABILITY_INIT_DATA));
    if (cachedData.version !== getAppVersion()) {
      setCards(VULNERABILITY_INIT_DATA);
    } else {
      setCards(cachedData);
      if (cachedData.submission?.verified)
        setCurrentCard(Card.submission);
      else {
        // Get the first card that hasn't been verified yet
        const unverified = Object.keys(cachedData).find((key) => cachedData[key].verified === false);
        if (unverified)
          setCurrentCard(Card[unverified]);
      }
    }
  }, [])


  useEffect(() => {
    localStorage.setItem(LocalStorage.SubmitVulnerability, JSON.stringify(cards));
  }, [cards])

  const toggleCard = (card: Card) => {
    if (card === currentCard) {
      setCurrentCard(undefined);
    }
    else setCurrentCard(card);
  }

  const resetCards = () => {
    console.log("reset", VULNERABILITY_INIT_DATA);
    setCards(VULNERABILITY_INIT_DATA);
  }

  const nextCard = () => {
    const currentIndex = steps.findIndex(step => step.card === currentCard);
    if (currentIndex <= steps.length)
      setCurrentCard(steps[currentIndex + 1].card)
  }

  const steps = [
    { title: "SELECT PROJECT", component: ProjectSelect, card: Card.project },
    { title: "CONTACT INFORMATION", component: ContactInfo, card: Card.contact },
    { title: "DESCRIBE VULNERABILITY", component: Description, card: Card.description },
    { title: "TERMS AND PROCESS", component: TermsAndProcess, card: Card.terms },
    { title: "SUBMIT", component: Submit, card: Card.submission }
  ];

  const context = {
    currentCard,
    toggleCard,
    cards,
    setCards,
    submittingVurnability,
    resetCards,
    nextCard
  }

  return (
    <div className="content vulnerability-wrapper">
      <div id="accrodionWrapper" className="accrodion-wrapper">
        <AccordionContext.Provider value={context}>
          {steps.map((step, index) => (
            <AccordionCard
              id={index}
              title={step.title}
              card={step.card}
              verified={cards?.[Card[step.card]] !== undefined}
              disabled={submittingVurnability} >
              {<step.component />}
            </AccordionCard>))}
          ~       </AccordionContext.Provider>
      </div>
    </div>
  )
}
