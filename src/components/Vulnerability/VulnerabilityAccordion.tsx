import React, { createContext, useState } from "react";
import "../../styles/Vulnerability/VulnerabilityAccordion.scss";
import AccordionCard from "./AccordionCard";
import ProjectSelect from "./ProjectSelect";
import Description from "./Description";
import ContactInfo from "./ContactInfo";
import TermsAndProcess from "./TermsAndProcess/TermsAndProcess";
import Submit from "./Submit/Submit";
import { getAppVersion } from "../../utils";
import { useSelector } from "react-redux";
import { RootState } from "../../reducers";
import { LocalStorage } from "../../constants/constants";
import { Card, IAccordionContext, IVulnerabilityData } from "./types";
import { IVault } from "types/types";
import { useTransactions } from "@usedapp/core";
const packageJSON = require("../../../package.json");

export const AccordionContext = createContext<IAccordionContext>({ currentCard: Card.project, toggleCard: () => { }, submitCard: () => { } });

export const VULNERABILITY_INIT_DATA: IVulnerabilityData = {
  version: packageJSON.version,
  project: {
    verified: false,
    projectName: "",
    projectId: ""
  },
  contact: {
    verified: false,
    username: "",
    beneficiary: ""
  },
  description: {
    verified: false,
    title: "",
    description: ""
  },
  terms: {
    verified: false
  },
  submission: {
    verified: false,
    botStatus: undefined,
    telegramBotUrl: "",
    encryptedData: "",
    transactionHash: "",
    isRouted: undefined
  }
}

export default function VulnerabilityAccordion() {
  const submittingVulnerability = useTransactions().transactions.some(tx => !tx.receipt)
  let cachedData: IVulnerabilityData = JSON.parse(localStorage.getItem(LocalStorage.SubmitVulnerability) || JSON.stringify(VULNERABILITY_INIT_DATA));

  if (cachedData.version !== getAppVersion()) {
    cachedData = VULNERABILITY_INIT_DATA;
  }

  // Get the first card that hasn't been verified yet
  const [currentCard, setCurrentCard] = useState<Card | undefined>(cachedData.submission.verified ? Card.submission : Object.keys(cachedData).find((key) => cachedData[key].verified === false) as Card);
  const [cards, setCards] = useState(cachedData);
  const vault = useSelector((state: RootState) => state.dataReducer.vaults?.filter((vault: IVault) => vault.id === cards.project.projectId)[0]);

  React.useEffect(() => {
    localStorage.setItem(LocalStorage.SubmitVulnerability, JSON.stringify(cards));
  }, [cards])

  const toggleCard = (card: Card) => {
    if (card === currentCard) {
      setCurrentCard(Card.none);
    }
    else setCurrentCard(card);
  }

  const submitCard = (card: Card, nextCard: Card, data?: any) => {
    setCards({ ...cards, [card]: { verified: true, ...data } });
    setCurrentCard(nextCard);
  }

  return (
    <div className="content vulnerability-wrapper">
      <div id="accrodionWrapper" className="accrodion-wrapper">
        <AccordionContext.Provider value={{ currentCard: currentCard, toggleCard: toggleCard, submitCard: submitCard }}>
          <AccordionCard id={1} card={Card.project} title="SELECT PROJECT" verified={cards.project.verified} disabled={submittingVulnerability || cards.submission.verified} projectName={cards.project.projectName}>
            <ProjectSelect data={cards.project} />
          </AccordionCard>
          <AccordionCard id={2} card={Card.contact} title="CONTACT INFORMATION" verified={cards.contact.verified} disabled={submittingVulnerability || cards.submission.verified}>
            <ContactInfo data={cards.contact} />
          </AccordionCard>
          <AccordionCard id={3} card={Card.description} title="DESCRIBE VULNERABILITY" verified={cards.description.verified} disabled={submittingVulnerability || cards.submission.verified}>
            <Description cards={cards} />
          </AccordionCard>
          <AccordionCard id={4} card={Card.terms} title="TERMS AND PROCESS" verified={cards.terms.verified} disabled={submittingVulnerability || cards.submission.verified}>
            {vault && <TermsAndProcess cards={cards} />}
          </AccordionCard>
          <AccordionCard id={5} card={Card.submission} title="SUBMIT" verified={cards.submission.verified} disabled={submittingVulnerability}>
            {vault && <Submit cards={cards} setCards={setCards} />}
          </AccordionCard>
        </AccordionContext.Provider>
      </div>
    </div>
  )
}
