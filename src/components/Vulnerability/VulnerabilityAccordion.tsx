import React, { useState } from "react";
import "../../styles/Vulnerability/VulnerabilityAccordion.scss";
import AccordionCard from "./AccordionCard";
import ProjectSelect from "./ProjectSelect";
import Description from "./Description";
import ContactInfo from "./ContactInfo";
import Submit from "./Submit";
import { getAppVersion } from "../../utils";
import { useSelector } from "react-redux";
import { RootState } from "../../reducers";
import { LocalStorage } from "../../constants/constants";
const packageJson = require("../../../package.json");


export interface ICardData {
  verified: boolean,
  data?: any
}

export interface IAccordionContext {
  currentCard: number
  toggleCard: Function
  submitCard: Function
}

export const AccordionContext = React.createContext<IAccordionContext>({ currentCard: 1, toggleCard: () => { }, submitCard: () => { } });

export const VULNERABILITY_INIT_DATA: { version: string, [id: number]: ICardData } = {
  version: packageJson.version,
  1: {
    verified: false,
    data: {
      projectName: "",
      projectId: ""
    }
  },
  2: {
    verified: false,
    data: {
      username: "",
      beneficiary: ""
    },
  },
  3: {
    verified: false,
    data: {
      title: "",
      description: ""
    }
  },
  4: {
    verified: false
  }
}

export default function VulnerabilityAccordion() {
  const submittingVulnerability = useSelector((state: RootState) => state.layoutReducer.submittingVulnerability);
  let cachedData = JSON.parse(localStorage.getItem(LocalStorage.SubmitVulnerability) || JSON.stringify(VULNERABILITY_INIT_DATA));

  if (cachedData.version !== getAppVersion()) {
    cachedData = VULNERABILITY_INIT_DATA;
  }

  // Get the first card that hasn't been verified yet
  const [currentCard, setCurrentCard] = useState(cachedData[4].verified ? 4 : Number(Object.keys(cachedData).find(key => cachedData[key].verified === false)));
  const [cards, setCards] = useState(cachedData);

  React.useEffect(() => {
    localStorage.setItem(LocalStorage.SubmitVulnerability, JSON.stringify(cards));
  }, [cards])

  const toggleCard = (card: number) => {
    if (card === currentCard) {
      setCurrentCard(-1);
    }
    else setCurrentCard(card);
  }

  const submitCard = (card: number, data?: any) => {
    setCards({ ...cards, [card]: { verified: true, data: data } });
    if (card === 4) { // last card
      setCurrentCard(card);
    } else {
      setCurrentCard(card + 1);
    }
  }

  return (
    <div className="content vulnerability-wrapper">
      <div id="accrodionWrapper" className="accrodion-wrapper">
        <AccordionContext.Provider value={{ currentCard: currentCard, toggleCard: toggleCard, submitCard: submitCard }}>
          <AccordionCard id={1} title="SELECT PROJECT" data={cards[1]} disabled={submittingVulnerability || cards[4].verified}>
            <ProjectSelect data={cards[1].data} />
          </AccordionCard>
          <AccordionCard id={2} title="CONTACT INFORMATION" data={cards[2]} disabled={submittingVulnerability || cards[4].verified}>
            <ContactInfo data={cards[2].data} />
          </AccordionCard>
          <AccordionCard id={3} title="DESCRIBE VULNERABILITY" data={cards[3]} disabled={submittingVulnerability || cards[4].verified}>
            <Description cards={cards} />
          </AccordionCard>
          <AccordionCard id={4} title="SUBMIT" data={cards[4]} disabled={submittingVulnerability}>
            <Submit cards={cards} setCards={setCards} />
          </AccordionCard>
        </AccordionContext.Provider>
      </div>
    </div>
  )
}
