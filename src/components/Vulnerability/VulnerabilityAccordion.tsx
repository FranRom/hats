import React, { createContext, Dispatch, SetStateAction, useEffect, useMemo, useState } from "react";
import "../../styles/Vulnerability/VulnerabilityAccordion.scss";
import AccordionCard from "./AccordionCard";
import ProjectSelect from "./ProjectSelect/ProjectSelect";
import Description from "./Description";
import ContactInfo from "./ContactInfo";
import TermsAndProcess from "./TermsAndProcess/TermsAndProcess";
import Submit from "./Submit/Submit";
import { getAppVersion } from "../../utils";
import { LocalStorage } from "../../constants/constants";
import { Card, IVulnerabilityData } from "./types";
import { useTransactions } from "@usedapp/core";
const packageJSON = require("../../../package.json");

interface IAccordionContext {
  currentStep?: number
  submittingVulnerability: boolean
  cards: IVulnerabilityData | undefined
  setCards: Dispatch<SetStateAction<IVulnerabilityData | undefined>>
  setCurrentStep: Dispatch<SetStateAction<number | undefined>>
  reset: Function
  toggleAccordion: Function
}
export const AccordionContext = createContext<IAccordionContext>(undefined as any);

export const VULNERABILITY_INIT_DATA: IVulnerabilityData = {
  version: packageJSON.version
};

export default function VulnerabilityAccordion() {
  const submittingVulnerability = useTransactions().transactions.some(tx => !tx.receipt)
  const [currentStep, setCurrentStep] = useState<number>();
  const [cards, setCards] = useState<IVulnerabilityData>();

  useEffect(() => {
    let cachedData: IVulnerabilityData = JSON.parse(localStorage.getItem(LocalStorage.SubmitVulnerability) || JSON.stringify(VULNERABILITY_INIT_DATA));
    if (cachedData.version !== getAppVersion()) {
      setCards(VULNERABILITY_INIT_DATA);
    } else {
      setCards(cachedData);
    }
  }, [])

  useEffect(() => {
    localStorage.setItem(LocalStorage.SubmitVulnerability, JSON.stringify(cards));
  }, [cards])

  const reset = () => {
    setCards(VULNERABILITY_INIT_DATA);
  }

  const toggleAccordion = (id: number) => {
    return id === currentStep ? setCurrentStep(0) : setCurrentStep(id)
  }

  const steps = useMemo(() => [
    { title: "SELECT PROJECT", component: ProjectSelect, card: Card.project },
    { title: "CONTACT INFORMATION", component: ContactInfo, card: Card.contact },
    { title: "DESCRIBE VULNERABILITY", component: Description, card: Card.description },
    { title: "TERMS AND PROCESS", component: TermsAndProcess, card: Card.terms },
    { title: "SUBMIT", component: Submit, card: Card.submission }
  ], []);

  useEffect(() => {
    if (!cards) return;
    const index = steps.findIndex(step => {
      return !cards[`${Card[step.card]}`]
    })

    if (index === -1)
      setCurrentStep(steps.length);
    else
      setCurrentStep(index + 1);
  }, [cards, steps])


  const context = {
    currentStep,
    setCurrentStep,
    cards,
    setCards,
    toggleAccordion,
    submittingVulnerability,
    // submitVulnerability,
    // nextCard,
    reset
  }


  return (
    <div className="content vulnerability-wrapper">
      <div id="accrodionWrapper" className="accrodion-wrapper">
        <AccordionContext.Provider value={context}>
          {steps.map((step, index) => (
            <AccordionCard
              id={index + 1}
              key={`${index}-${step.title}`}
              title={step.title}
              verified={cards?.[Card[step.card]]?.verified}
              disabled={submittingVulnerability}
              projectName={cards?.project?.projectName}
            >
              {<step.component />}
            </AccordionCard>)

          )}
        </AccordionContext.Provider>
      </div>
    </div>
  );
}
