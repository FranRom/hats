import React, { useState } from "react";
import "../../styles/Vulnerability/Submit.scss";
import { ICardData } from "./VulnerabilityAccordion";
import sha256 from "sha256";
import { createTransaction, submitVulnerability } from "../../actions/contractsActions";
import { useDispatch, useSelector } from "react-redux";
import { initData } from "./VulnerabilityAccordion";
import Loading from "../Shared/Loading";
import { isProviderAndNetwork } from "../../utils";
import { RootState } from "../../reducers";
import axios from "axios";
import { TELEGRAM_BOT_URL } from "../../settings";
import { toggleNotification } from "../../actions";
import { DEFAULT_ERROR_MESSAGE, NotificationType } from "../../constants/constants";
const openpgp = require("openpgp");

interface IProps {
  cards: { [id: number]: ICardData }
  setCards: Function
}

export default function Submit(props: IProps) {
  const { cards } = props;
  const dispatch = useDispatch();
  const isVerified = cards[1].verified && cards[2].verified && cards[3].verified;
  const [inTransaction, setInTransaction] = useState(false);
  const provider = useSelector((state: RootState) => state.web3Reducer.provider);

  const submit = async () => {
    setInTransaction(true);
    const encryptedData = await pgpData();
    const sha256Encrypted = sha256(encryptedData.replace(/\s+/g, ''));
    try {
      await createTransaction(
        async () => await submitVulnerability(cards[1].data.masterAddress, sha256Encrypted),
        async () => {
          await axios.post(TELEGRAM_BOT_URL, { msg: encryptedData });
          localStorage.removeItem("submitVulnerabilityData");
          props.setCards(initData);
        },
        () => { },
        dispatch,
        "The vulnerability was submitted successfully");
    } catch (err) {
      console.error(err);
      dispatch(toggleNotification(true, NotificationType.Error, err?.message ?? DEFAULT_ERROR_MESSAGE));
    }
    setInTransaction(false);
  }

  const pgpData = async () => {
    const dataToEncrypt = `
    Project Name: ${cards[1].data.projectName}
    Title: ${cards[3].data.title}
    Description: ${cards[3].data.description}
    Telegram username: ${cards[2].data.username}
    `
    // TODO: Get from subgraph
    const publicKeyArmored = `-----BEGIN PGP PUBLIC KEY BLOCK-----

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
=capV
-----END PGP PUBLIC KEY BLOCK-----`;

    const publicKey = await openpgp.readKey({ armoredKey: publicKeyArmored });

    const encrypted = await openpgp.encrypt({
      message: openpgp.Message.fromText(dataToEncrypt),
      publicKeys: publicKey
    });
    return encrypted;
  }

  // TODO: the table should be dynamic - each project with it's own severity
  return <div className={inTransaction ? "submit-wrapper loading card-content" : "submit-wrapper card-content"}>
    <div><span className="arrow-text">{`-->`}</span>After submitting a vulnerability you will recieve the committee reciept and processing timeline via Telegram. The committee triaged is estimated between 5-7 days</div>
    <div><span className="arrow-text">{`-->`}</span>Prizes are allocated by vulnerability level:</div>
    <table>
      <tbody>
        <tr>
          <th>Level</th>
          <th>Prize</th>
          <th>Added Prize</th>
        </tr>
        <tr className="">
          <td>LOW</td>
          <td><b>5%</b> of Honeypot <span>&#8776; $0.00</span></td>
          <td>NFT</td>
        </tr>
        <tr>
          <td>MEDIUM</td>
          <td><b>10%</b> of Honeypot <span>&#8776; $0.00</span></td>
          <td>NFT</td>
        </tr>
        <tr>
          <td>HIGH</td>
          <td><b>30%</b> of Honeypot <span>&#8776; $0.00</span></td>
          <td>NFT</td>
        </tr>
        <tr>
          <td>CRITICAL</td>
          <td>Up to <b>90%</b> of Honeypot <span>&#8776; $0.00</span></td>
          <td>NFT</td>
        </tr>
        <tr>
          <td style={{ color: "#D1891D" }}>AUDIT REQUEST</td>
          <td><b>?%</b> of Honeypot <span>&#8776; $0.00</span></td>
          <td>NFT</td>
        </tr>
      </tbody>
    </table>
    <button disabled={!isVerified || inTransaction || !isProviderAndNetwork(provider)} onClick={submit}>SUBMIT</button>
    {inTransaction && <Loading />}
  </div>
}
