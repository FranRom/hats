import React, { useState } from "react";
import "../../styles/Vulnerability/Submit.scss";
import { ICardData } from "./VulnerabilityAccordion";
import sha256 from "sha256";
import { createTransaction, submitVulnerability } from "../../actions/contractsActions";
import { useDispatch, useSelector } from "react-redux";
import { initData } from "./VulnerabilityAccordion";
import Loading from "../Shared/Loading";
import { isProviderAndNetwork } from "../../utils";
import { RootState } from "../../reducers";

interface IProps {
  cards: { [id: number]: ICardData }
  setCards: Function
}

export default function Submit(props: IProps) {
  const dispatch = useDispatch();
  const isVerified = props.cards[1].verified && props.cards[2].verified && props.cards[3].verified;
  const [inTransaction, setInTransaction] = useState(false);
  const provider = useSelector((state: RootState) => state.web3Reducer.provider);

  const submit = async () => {
    setInTransaction(true);
    await createTransaction(
      async () => submitVulnerability(props.cards[1].data.masterAddress, sha256(props.cards[2].data.description)),
      () => {
        localStorage.removeItem("submitVulnerabilityData");
        props.setCards(initData);
      },
      () => { },
      dispatch,
      "The vulnerability was submitted successfully");
    setInTransaction(false);
  }

  return <div className={inTransaction ? "submit-wrapper loading card-content" : "submit-wrapper card-content"}>
    <div><span className="arrow-text">{`-->`}</span>After submitting a vulnerability you will recieve the committee reciept and processing timeline via keybase. The committee triaged is estimated between 5-7 days</div>
    <div><span className="arrow-text">{`-->`}</span>Prizes are allocated by vulnerability level:</div>
    <table>
      <tbody>
        <tr>
          <th>Level</th>
          <th>Prize</th>
          <th>Added Prize</th>
        </tr>
        <tr className="">
          <td>LOW</td>
          <td>300$</td>
          <td>NFT</td>
        </tr>
        <tr>
          <td>MEDIUM</td>
          <td>2,000$</td>
          <td>NFT</td>
        </tr>
        <tr>
          <td>HIGH</td>
          <td>10,000$</td>
          <td>NFT</td>
        </tr>
        <tr>
          <td>CRITICAL</td>
          <td>up to 90% of Honeypot</td>
          <td>NFT</td>
        </tr>
      </tbody>
    </table>
    <button disabled={!isVerified || inTransaction || !isProviderAndNetwork(provider)} onClick={submit}>SUBMIT</button>
    {inTransaction && <Loading />}
  </div>
}
