import React, { useState } from "react";
import "../../styles/Vulnerability/Submit.scss";
import { ICardData } from "./VulnerabilityAccordion";
import sha256 from "sha256";
import { createTransaction, submitVulnerability } from "../../actions/contractsActions";
import { useDispatch, useSelector } from "react-redux";
import { initData } from "./VulnerabilityAccordion";
import Loading from "../Shared/Loading";
import { isProviderAndNetwork } from "../../utils";
import { RootState } from "../../reducers";
//const openpgp = require("openpgp");

interface IProps {
  cards: { [id: number]: ICardData }
  setCards: Function
}

export default function Submit(props: IProps) {
  const dispatch = useDispatch();
  const isVerified = props.cards[1].verified && props.cards[2].verified && props.cards[3].verified;
  const [inTransaction, setInTransaction] = useState(false);
  const provider = useSelector((state: RootState) => state.web3Reducer.provider);

  const submit = async () => {
    setInTransaction(true);
    await createTransaction(
      async () => submitVulnerability(props.cards[1].data.masterAddress, sha256(props.cards[2].data.description)),
      () => {
        localStorage.removeItem("submitVulnerabilityData");
        props.setCards(initData);
      },
      () => { },
      dispatch,
      "The vulnerability was submitted successfully");
    setInTransaction(false);
  }

//   const pgp = async () => {
//     // put keys in backtick (``) to avoid errors caused by spaces or tabs
//     const publicKeyArmored = `-----BEGIN PGP PUBLIC KEY BLOCK-----

// ...
// -----END PGP PUBLIC KEY BLOCK-----`;
//     const privateKeyArmored = `-----BEGIN PGP PRIVATE KEY BLOCK-----

// ...
// -----END PGP PRIVATE KEY BLOCK-----`; // encrypted private key
//     const passphrase = `yourPassphrase`; // what the private key is encrypted with

//     const publicKey = await openpgp.readKey({ armoredKey: publicKeyArmored });

//     const privateKey = await openpgp.readKey({ armoredKey: privateKeyArmored });
//     await privateKey.decrypt(passphrase);

//     const encrypted = await openpgp.encrypt({
//       message: openpgp.Message.fromText('Hello, World!'), // input as Message object
//       publicKeys: publicKey, // for encryption
//       privateKeys: privateKey // for signing (optional)
//     });
//     console.log(encrypted); // '-----BEGIN PGP MESSAGE ... END PGP MESSAGE-----'

//     const message = await openpgp.readMessage({
//       armoredMessage: encrypted // parse armored message
//     });
//     const { data: decrypted } = await openpgp.decrypt({
//       message,
//       publicKeys: publicKey, // for verification (optional)
//       privateKeys: privateKey // for decryption
//     });
//     console.log(decrypted); // 'Hello, World!'
//   }

  return <div className={inTransaction ? "submit-wrapper loading card-content" : "submit-wrapper card-content"}>
    <div><span className="arrow-text">{`-->`}</span>After submitting a vulnerability you will recieve the committee reciept and processing timeline via Telegram. The committee triaged is estimated between 5-7 days</div>
    <div><span className="arrow-text">{`-->`}</span>Prizes are allocated by vulnerability level:</div>
    <table>
      <tbody>
        <tr>
          <th>Level</th>
          <th>Prize</th>
          <th>Added Prize</th>
        </tr>
        <tr className="">
          <td>LOW</td>
          <td><b>5%</b> of Honeypot <span>&#8776; $0.00</span></td>
          <td>NFT</td>
        </tr>
        <tr>
          <td>MEDIUM</td>
          <td><b>10%</b> of Honeypot <span>&#8776; $0.00</span></td>
          <td>NFT</td>
        </tr>
        <tr>
          <td>HIGH</td>
          <td><b>30%</b> of Honeypot <span>&#8776; $0.00</span></td>
          <td>NFT</td>
        </tr>
        <tr>
          <td>CRITICAL</td>
          <td>Up to <b>90%</b> of Honeypot <span>&#8776; $0.00</span></td>
          <td>NFT</td>
        </tr>
        <tr>
          <td style={{ color: "#D1891D" }}>AUDIT REQUEST</td>
          <td><b>?%</b> of Honeypot <span>&#8776; $0.00</span></td>
          <td>NFT</td>
        </tr>
      </tbody>
    </table>
    <button disabled={!isVerified || inTransaction || !isProviderAndNetwork(provider)} onClick={submit}>SUBMIT</button>
    {/* <button onClick={async () => await pgp()}>pgp</button> */}
    {inTransaction && <Loading />}
  </div>
}
