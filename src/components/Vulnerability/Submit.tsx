import React, { useState } from "react";
import "../../styles/Vulnerability/Submit.scss";
import sha256 from "sha256";
import { createTransaction, submitVulnerability } from "../../actions/contractsActions";
import { useDispatch, useSelector } from "react-redux";
import { AccordionContext, ICardData, VULNERABILITY_INIT_DATA } from "./VulnerabilityAccordion";
import Loading from "../Shared/Loading";
import { isProviderAndNetwork, parseJSONToObject } from "../../utils";
import { RootState } from "../../reducers";
import axios from "axios";
import { toggleNotification, toggleSubmittingVulnerability } from "../../actions";
import { DEFAULT_ERROR_MESSAGE, NotificationType, Colors, SocialLinks } from "../../constants/constants";
import { IVault } from "../../types/types";
import DiscordIcon from "../../assets/icons/social/discord.icon";
import { NETWORK } from "../../settings";
const openpgp = require("openpgp");

interface IProps {
  cards: { [id: number]: ICardData }
  setCards: Function
}

export default function Submit(props: IProps) {
  const { cards } = props;
  const dispatch = useDispatch();
  const isVerified = cards[1].verified && cards[2].verified && cards[3].verified && cards[4].verified;
  const submittingVulnerability = useSelector((state: RootState) => state.layoutReducer.submittingVulnerability);
  const [pendingWalletAction, setPendingWalletAction] = useState(false);
  const provider = useSelector((state: RootState) => state.web3Reducer.provider);
  const projectId = cards[1].data.projectId;

  const { submitCard, toggleCard } = React.useContext(AccordionContext);
  const vault: IVault = useSelector((state: RootState) => state.dataReducer.vaults.filter((vault: IVault) => vault.id === projectId)[0]);

  const description = vault && parseJSONToObject((vault.isGuest ? vault.parentDescription : vault.description) as string);

  const committeeCheckedIn = vault && vault.parentVault.committeeCheckedIn;



  const submit = async () => {
    dispatch(toggleSubmittingVulnerability(true));
    setPendingWalletAction(true);
    const encryptedData = await pgpData();
    const telegramBotUrl = `${description?.["communication-channel"]?.["committee-bot"]}`;
    const sha256Encrypted = sha256(encryptedData.replace(/\s+/g, ''));
    try {
      await createTransaction(
        async () => await submitVulnerability(vault.parentVault.master.address, sha256Encrypted),
        () => { setPendingWalletAction(false) },
        async () => {
          await axios.post(telegramBotUrl, { msg: encryptedData });
          submitCard(5);
        },
        () => { setPendingWalletAction(false); },
        dispatch,
        "The vulnerability was submitted successfully", 2, true);
    } catch (err: any) {
      console.error(err);
      dispatch(toggleNotification(true, NotificationType.Error, err?.message ?? DEFAULT_ERROR_MESSAGE, true));
    }
    dispatch(toggleSubmittingVulnerability(false));
  }

  const pgpData = async () => {
    const dataToEncrypt = `
    Project Name: ${cards[1].data.projectName}
    Title: ${cards[3].data.title}
    Description: ${cards[3].data.description}
    Telegram username: ${cards[2].data.username}
    Beneficiary: ${cards[2].data.beneficiary}
    `
    const publicKeyArmored = `${description?.["communication-channel"]?.["pgp-pk"]}`;

    const publicKey = await openpgp.readKey({ armoredKey: publicKeyArmored });

    const encrypted = await openpgp.encrypt({
      message: await openpgp.createMessage({ text: dataToEncrypt }),
      encryptionKeys: publicKey
    });
    return encrypted;
  }

  const showSubmitWarning = !isVerified || !isProviderAndNetwork(provider);

  return (
    <div className={submittingVulnerability ? "submit-wrapper loading card-content" : "submit-wrapper card-content"}>
      {cards[5].verified ? (
        <>
          <div>Hey new Hatter, thank you for your submission!</div>
          <div>Become an active member of our community and let us know what you think.</div>
          <div className="submit-complete-actions-wrapper">
            <button onClick={() => { props.setCards(VULNERABILITY_INIT_DATA); toggleCard(1) }}>SUBMIT NEW VULNERABILITY</button>
            <button className="discord-btn" onClick={() => window.open(SocialLinks.Discord)}>
              <span>JOIN US ON DISCORD</span>
              <DiscordIcon fill={Colors.darkBlue} />
            </button>
          </div>
        </>) : (
        <>
          <div>After submitting a vulnerability you will receive the committee receipt and processing timeline via Telegram. The committee triaged is estimated between 5-7 days</div>

          <div className="submit-action-wrapper">
            <button disabled={!isVerified || submittingVulnerability || !isProviderAndNetwork(provider) || (vault && !committeeCheckedIn)} onClick={submit}>SUBMIT</button>
          </div>
          {vault && !committeeCheckedIn && <span className="error-label">COMMITTEE IS NOT CHECKED IN YET!</span>}
          {showSubmitWarning && <span className="error-label">{`Please make sure you completed all step and your wallet is connected to ${NETWORK}`}</span>}
          {(pendingWalletAction || submittingVulnerability) && <Loading fixed extraText="Submitting might take longer than usual" domElement={document.getElementById("accrodionWrapper") as HTMLElement} zIndex={0} />}
        </>)}
    </div>
  )
}
