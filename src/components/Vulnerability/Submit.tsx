import React, { useState } from "react";
import "../../styles/Vulnerability/Submit.scss";
import { ICardData } from "./VulnerabilityAccordion";
import sha256 from "sha256";
import { createTransaction, submitVulnerability } from "../../actions/contractsActions";
import { useDispatch, useSelector } from "react-redux";
import { initData } from "./VulnerabilityAccordion";
import Loading from "../Shared/Loading";
import { isProviderAndNetwork } from "../../utils";
import { RootState } from "../../reducers";
import axios from "axios";
import { TELEGRAM_BOT_URL } from "../../settings";
import { toggleNotification } from "../../actions";
import { DEFAULT_ERROR_MESSAGE, NotificationType } from "../../constants/constants";
import { ISeverity } from "../../types/types";
const openpgp = require("openpgp");

interface IProps {
  cards: { [id: number]: ICardData }
  setCards: Function
}

export default function Submit(props: IProps) {
  const { cards } = props;
  const dispatch = useDispatch();
  const isVerified = cards[1].verified && cards[2].verified && cards[3].verified;
  const [inTransaction, setInTransaction] = useState(false);
  const provider = useSelector((state: RootState) => state.web3Reducer.provider);
  
  let prizes;
  if (cards[1].verified) {
    prizes = cards[1].data?.description.severities.map((severity: ISeverity, index: number) => {
      return <tr>
        <td>{severity.name.toUpperCase()}</td>
        <td><b>???%</b> of Honeypot <span>&#8776; $???</span></td>
        <td>NFT ???</td>
      </tr>
    })
  }

  const submit = async () => {
    setInTransaction(true);
    const encryptedData = await pgpData();
    const sha256Encrypted = sha256(encryptedData.replace(/\s+/g, ''));
    try {
      await createTransaction(
        async () => await submitVulnerability(cards[1].data.masterAddress, sha256Encrypted),
        async () => {
          await axios.post(TELEGRAM_BOT_URL, { msg: encryptedData });
          localStorage.removeItem("submitVulnerabilityData");
          props.setCards(initData);
        },
        () => { },
        dispatch,
        "The vulnerability was submitted successfully", 2);
    } catch (err) {
      console.error(err);
      dispatch(toggleNotification(true, NotificationType.Error, err?.message ?? DEFAULT_ERROR_MESSAGE));
    }
    setInTransaction(false);
  }

  const pgpData = async () => {
    const dataToEncrypt = `
    Project Name: ${cards[1].data.projectName}
    Title: ${cards[3].data.title}
    Description: ${cards[3].data.description}
    Telegram username: ${cards[2].data.username}
    `
    const publicKeyArmored = `${cards[1].data.description["communication-channel"]["pgp-pk"]}`;

    const publicKey = await openpgp.readKey({ armoredKey: publicKeyArmored });

    const encrypted = await openpgp.encrypt({
      message: openpgp.Message.fromText(dataToEncrypt),
      publicKeys: publicKey
    });
    return encrypted;
  }

  // TODO: the table should be dynamic - each project with it's own severity
  return <div className={inTransaction ? "submit-wrapper loading card-content" : "submit-wrapper card-content"}>
    <div><span className="arrow-text">{`-->`}</span>After submitting a vulnerability you will recieve the committee reciept and processing timeline via Telegram. The committee triaged is estimated between 5-7 days</div>
    <div><span className="arrow-text">{`-->`}</span>{cards[1].verified ? "Prizes are allocated by vulnerability level:" : "Please choose project to view prizes"}</div>
    {cards[1].verified &&
      <table>
        <tbody>
          <tr>
            <th>Level</th>
            <th>Prize</th>
            <th>Added Prize</th>
          </tr>
          {prizes}
        </tbody>
      </table>}
    <button disabled={!isVerified || inTransaction || !isProviderAndNetwork(provider)} onClick={submit}>SUBMIT</button>
    {inTransaction && <Loading />}
  </div>
}
