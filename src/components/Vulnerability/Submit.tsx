import React, { useState } from "react";
import "../../styles/Vulnerability/Submit.scss";
import { ICardData } from "./VulnerabilityAccordion";
import sha256 from "sha256";
import { createTransaction, submitVulnerability } from "../../actions/contractsActions";
import { useDispatch, useSelector } from "react-redux";
import { initData } from "./VulnerabilityAccordion";
import Loading from "../Shared/Loading";
import { isProviderAndNetwork } from "../../utils";
import { RootState } from "../../reducers";
import axios from "axios";
import { TELEGRAM_BOT_URL } from "../../settings";
import { toggleNotification } from "../../actions";
import { DEFAULT_ERROR_MESSAGE, NotificationType } from "../../constants/constants";
const openpgp = require("openpgp");

interface IProps {
  cards: { [id: number]: ICardData }
  setCards: Function
}

export default function Submit(props: IProps) {
  const { cards } = props;
  const dispatch = useDispatch();
  const isVerified = cards[1].verified && cards[2].verified && cards[3].verified;
  const [inTransaction, setInTransaction] = useState(false);
  const provider = useSelector((state: RootState) => state.web3Reducer.provider);

  const submit = async () => {
    setInTransaction(true);
    const encryptedData = await pgpData();
    const sha256Encrypted = sha256(encryptedData);
    try {
      await axios.post(TELEGRAM_BOT_URL, { msg: encryptedData });
    } catch (err) {
      console.error(err);
      dispatch(toggleNotification(true, NotificationType.Error, err?.message ?? DEFAULT_ERROR_MESSAGE));
    }
    await createTransaction(
      async () => submitVulnerability(cards[1].data.masterAddress, sha256Encrypted),
      () => {
        localStorage.removeItem("submitVulnerabilityData");
        props.setCards(initData);
      },
      () => { },
      dispatch,
      "The vulnerability was submitted successfully");
    setInTransaction(false);
  }

  const pgpData = async () => {
    const dataToEncrypt = `
    Project Name: ${cards[1].data.projectName}
    Title: ${cards[3].data.title}
    Description: ${cards[3].data.description}
    Telegram username: ${cards[2].data.username}
    `
    // Get from subgraph
    const publicKeyArmored = `-----BEGIN PGP PUBLIC KEY BLOCK-----

mQENBGCBPzkBCAC9f8diwPBEyvT0LAe87Ye00mY3nbF9lflmpd6gIUlLUNSL/DgL
z2xW1Bft1YTTa4O+ED/gkWrrEoX9bp2ICBFYrgJ28QkN4UDQcQLLEb5AY2bb1soa
Oa3GszC65Pwe3s/Mno/p1OA6PmbB3MUPZdina1SwCCNr01zMU5rDqLUZ0CFw4Zv/
HzwEM/yhhSerHMu320rmY0QEDOoOayhjnCYqcN0v0OR8Q/FujYkkNpltLq0BUXow
fYX+oCpnUp6NGit0l9xLHyHjk7ubYAtiBfEY2fDROcdeb1RcFV6j/Iyb5a8lIBSn
sIPUkBNYgsSdhFVAtgO9F2Or52mWRJM6eDJFABEBAAG0HXNoYXkgemx1ZiA8dGhl
emx1ZkBnbWFpbC5jb20+iQFUBBMBCAA+FiEEtoaYKIhpspT/UG8RcFLDL5ww5pMF
AmCBPzkCGwMFCQPCZwAFCwkIBwIGFQoJCAsCBBYCAwECHgECF4AACgkQcFLDL5ww
5pMCHAgAq4C0zmv2v6pt4YPUl1f5SfFcueziMCpJQhuYsZ2+vd3qUl+vgUNsm+aD
vQAGsYKEosS6s64O9PzlO+gjAjB1wGJpPbJyi14uIT4INTo+ow2NTzSrKYX8K0x5
dKn277B7k9n9LuRb6VqC56K3II4dU+lOU8cfPSgB0E8f7g4LrSJoODDsQohan24J
Wf8YtAF75ADU0iCUANboSbUsMY5FMCJsPyDCrm0OpBNAQW1Vrt9ean95NDo/h0l7
1WfDOCo/3uPyIx8oGsCeVh0822z15ADw0ZA9Yk9cU//kmDKiXAY8s2GhZOTJ9j6j
TvnnoUky/9ddXrx0D8LtLzRzhzWDobkBDQRggT85AQgAvvJJQ/RR2OJDByVI9L07
/gI7YE/7fRt2U9GA4u6mgZbeFMgOgAWe/4ZebL28S8OTq58Gp+tEP8mPi4Dq6i0P
gxlSdDyDBWSsLXJOXSAbVzaerWImG05XtrmoNFJ4SxDA6p0y2cBQvdffZf6o4mkg
krn3cCEhtqahRJcy17fpmsolHtR5njkETRj1b8hqSRRIYCr2vo2anNza+j57XO4U
evXseqkvIz4//U3ukW4oyLbF7lwu87XrjH6otK38KzRtMfszyVCJsm+zygnCF5KV
Ks9glfHW0kTqJenXt1P9Qi8Qfdr/2Y311MTEZZfrLUClMHqexZoAt9fLmNL9B4V1
gQARAQABiQE8BBgBCAAmFiEEtoaYKIhpspT/UG8RcFLDL5ww5pMFAmCBPzkCGwwF
CQPCZwAACgkQcFLDL5ww5pOsRwf+LLAFdogsOJ1HXQ19KGmxprGnLFQaaFHPTW9X
JfJNswL+kfFEun6PDvzkYjBBVLGnz60vmqL8o4BEd4FcakxA3Z5bB3RdoqczWgAP
mdEmX7UqYuuYOP2ltD+NQOH5KthsB30Z7385EDYUT/YIPG9gdGpNmTZ6i7f7NbYW
YC2rP4w9thyawHmcBtRv7Yd7ATHGSUEE9WFCWj9koB+xBBdNqdSpoPCdZicD7nd5
GIc821hrQzHuzWonIieTX8OL3+jWOYKyUvR54HNx9w4xCw12ILuau9d7u/MmnX8m
EUf9hTEhqJSCobkueJ6byzixeW+PgYPVAscrSc0f1o1EzrkG0g==
=mIzx
-----END PGP PUBLIC KEY BLOCK-----`;

    const publicKey = await openpgp.readKey({ armoredKey: publicKeyArmored });

    const encrypted = await openpgp.encrypt({
      message: openpgp.Message.fromText(dataToEncrypt),
      publicKeys: publicKey
    });
    return encrypted;
  }

  return <div className={inTransaction ? "submit-wrapper loading card-content" : "submit-wrapper card-content"}>
    <div><span className="arrow-text">{`-->`}</span>After submitting a vulnerability you will recieve the committee reciept and processing timeline via Telegram. The committee triaged is estimated between 5-7 days</div>
    <div><span className="arrow-text">{`-->`}</span>Prizes are allocated by vulnerability level:</div>
    <table>
      <tbody>
        <tr>
          <th>Level</th>
          <th>Prize</th>
          <th>Added Prize</th>
        </tr>
        <tr className="">
          <td>LOW</td>
          <td><b>5%</b> of Honeypot <span>&#8776; $0.00</span></td>
          <td>NFT</td>
        </tr>
        <tr>
          <td>MEDIUM</td>
          <td><b>10%</b> of Honeypot <span>&#8776; $0.00</span></td>
          <td>NFT</td>
        </tr>
        <tr>
          <td>HIGH</td>
          <td><b>30%</b> of Honeypot <span>&#8776; $0.00</span></td>
          <td>NFT</td>
        </tr>
        <tr>
          <td>CRITICAL</td>
          <td>Up to <b>90%</b> of Honeypot <span>&#8776; $0.00</span></td>
          <td>NFT</td>
        </tr>
        <tr>
          <td style={{ color: "#D1891D" }}>AUDIT REQUEST</td>
          <td><b>?%</b> of Honeypot <span>&#8776; $0.00</span></td>
          <td>NFT</td>
        </tr>
      </tbody>
    </table>
    <button disabled={!isVerified || inTransaction || !isProviderAndNetwork(provider)} onClick={submit}>SUBMIT</button>
    {inTransaction && <Loading />}
  </div>
}
